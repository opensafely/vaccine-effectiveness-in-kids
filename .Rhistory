missing_rate = ~0.7
),
postest_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.7
),
emergency_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 200)),
missing_rate = ~0.8
),
emergencyhosp_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 200)),
missing_rate = ~0.85
),
covidemergency_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 200)),
missing_rate = ~0.8
),
covidemergencyhosp_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 200)),
missing_rate = ~0.85
),
# respemergency_day = bn_node(
#   ~as.integer(runif(n=..n, vax1_day, vax1_day+100)),
#   missing_rate = ~0.95
# ),
#
# respemergencyhosp_day = bn_node(
#   ~as.integer(runif(n=..n, vax1_day, vax1_day+100)),
#   missing_rate = ~0.95
# ),
covidadmitted_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.7
),
# placeholder for single criticalcare variable ---
covidcritcare_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.8
),
admitted_unplanned_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.7
),
# admitted_planned_day = bn_node(
#   ~as.integer(runif(n=..n, vax1_day, vax1_day+100)),
#   missing_rate = ~0.7
# ),
coviddeath_day = bn_node(
~death_day,
missing_rate = ~0.7,
needs = "death_day"
),
death_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.90
),
)
sim_list <- splice(sim_list_pre, sim_list_post)
bn <- bn_create(sim_list, known_variables = known_variables)
bn_plot(bn)
bn_plot(bn, connected_only = TRUE)
set.seed(10)
dummydata <- bn_simulate(bn, pop_size = population_size, keep_all = FALSE, .id = "patient_id")
dummydata_processed <- dummydata %>%
mutate(
# covid vax any
covid_vax_any_1_day = pmin(covid_vax_pfizerA_1_day, covid_vax_pfizerC_1_day, na.rm = TRUE),
covid_vax_any_2_day = pmin(covid_vax_pfizerA_2_day, covid_vax_pfizerC_2_day, na.rm = TRUE),
) %>%
# convert logical to integer as study defs output 0/1 not TRUE/FALSE
# mutate(across(where(is.logical), ~ as.integer(.))) %>%
# convert integer days to dates since index date and rename vars
mutate(across(ends_with("_day"), ~ as.Date(as.character(index_date + .)))) %>%
rename_with(~ str_replace(., "_day", "_date"), ends_with("_day"))
fs::dir_create(here("lib", "dummydata"))
dummydata_processed %>%
filter(treated) %>%
select(-treated) %>%
write_feather(sink = ghere("lib", "dummydata", "dummy_treated_{cohort}.feather"))
dummydata_processed %>%
select(-treated) %>%
select(-all_of(str_replace(names(sim_list_post), "_day", "_date"))) %>%
select(-covid_vax_pfizerA_1_date, -covid_vax_pfizerA_2_date, -covid_vax_pfizerC_1_date, -covid_vax_pfizerC_2_date, -covid_vax_any_2_date) %>%
write_feather(sink = ghere("lib", "dummydata", "dummy_control_potential1_{cohort}.feather"))
######################################
# This script:
# imports data extracted by the cohort extractor (or dummy data)
# fills in unknown ethnicity from GP records with ethnicity from SUS (secondary care)
# tidies missing values
# standardises some variables (eg convert to factor) and derives some new ones
# organises vaccination date data to "vax X type", "vax X date" (rather than "pfizer X date", "az X date", ...)
######################################
# Preliminaries ----
## Import libraries ----
library("tidyverse")
library("lubridate")
library("arrow")
library("here")
library("glue")
## import local functions and parameters ---
source(here("analysis", "design.R"))
source(here("lib", "functions", "utility.R"))
## import command-line arguments ----
args <- commandArgs(trailingOnly = TRUE)
if (length(args) == 0) {
# use for interactive testing
removeobjects <- FALSE
cohort <- "over12"
} else {
# FIXME replace with actual eventual action variables
removeobjects <- TRUE
cohort <- args[[1]]
}
dates <- map(study_dates[[cohort]], as.Date)
params <- study_params[[cohort]]
## create output directory ----
fs::dir_create(here("output", cohort, "treated"))
# use externally created dummy data if not running in the server
# check variables are as they should be
if (Sys.getenv("OPENSAFELY_BACKEND") %in% c("", "expectations")) {
# ideally in future this will check column existence and types from metadata,
# rather than from a cohort-extractor-generated dummy data
data_studydef_dummy <- read_feather(ghere("output", cohort, "extract", "input_treated.feather")) %>%
# because date types are not returned consistently by cohort extractor
mutate(across(ends_with("_date"), ~ as.Date(.))) %>%
# because of a bug in cohort extractor -- remove once pulled new version
mutate(patient_id = as.integer(patient_id))
data_custom_dummy <- read_feather(ghere("lib", "dummydata", "dummy_treated_{cohort}.feather")) %>%
mutate(
msoa = sample(factor(c("1", "2")), size = n(), replace = TRUE) # override msoa so matching success more likely
)
not_in_studydef <- names(data_custom_dummy)[!(names(data_custom_dummy) %in% names(data_studydef_dummy))]
not_in_custom <- names(data_studydef_dummy)[!(names(data_studydef_dummy) %in% names(data_custom_dummy))]
if (length(not_in_custom) != 0) {
stop(
paste(
"These variables are in studydef but not in custom: ",
paste(not_in_custom, collapse = ", ")
)
)
}
if (length(not_in_studydef) != 0) {
stop(
paste(
"These variables are in custom but not in studydef: ",
paste(not_in_studydef, collapse = ", ")
)
)
}
# reorder columns
data_studydef_dummy <- data_studydef_dummy[, names(data_custom_dummy)]
unmatched_types <- cbind(
map_chr(data_studydef_dummy, ~ paste(class(.), collapse = ", ")),
map_chr(data_custom_dummy, ~ paste(class(.), collapse = ", "))
)[(map_chr(data_studydef_dummy, ~ paste(class(.), collapse = ", ")) != map_chr(data_custom_dummy, ~ paste(class(.), collapse = ", "))), ] %>%
as.data.frame() %>%
rownames_to_column()
if (nrow(unmatched_types) > 0) {
stop(
# unmatched_types
"inconsistent typing in studydef : dummy dataset\n",
apply(unmatched_types, 1, function(row) paste(paste(row, collapse = " : "), "\n"))
)
}
data_extract <- data_custom_dummy
} else {
data_extract <- read_feather(ghere("output", cohort, "extract", "input_treated.feather")) %>%
# because date types are not returned consistently by cohort extractor
mutate(across(ends_with("_date"), as.Date))
}
data_processed <- data_extract %>%
mutate(
sex = fct_case_when(
sex == "F" ~ "Female",
sex == "M" ~ "Male",
# sex == "I" ~ "Inter-sex",
# sex == "U" ~ "Unknown",
TRUE ~ NA_character_
),
# ethnicity_combined = if_else(is.na(ethnicity), ethnicity_6_sus, ethnicity),
#
# ethnicity_combined = fct_case_when(
#   ethnicity_combined == "1" ~ "White",
#   ethnicity_combined == "4" ~ "Black",
#   ethnicity_combined == "3" ~ "South Asian",
#   ethnicity_combined == "2" ~ "Mixed",
#   ethnicity_combined == "5" ~ "Other",
#   #TRUE ~ "Unknown",
#   TRUE ~ NA_character_
#
# ),
region = fct_collapse(
region,
`East of England` = "East",
`London` = "London",
`Midlands` = c("West Midlands", "East Midlands"),
`North East and Yorkshire` = c("Yorkshire and The Humber", "North East"),
`North West` = "North West",
`South East` = "South East",
`South West` = "South West"
),
# prior_tests_cat = cut(prior_covid_test_frequency, breaks=c(0, 1, 2, 3, Inf), labels=c("0", "1", "2", "3+"), right=FALSE),
prior_covid_infection = (!is.na(postest_0_date)) | (!is.na(covidadmitted_0_date)) | (!is.na(primary_care_covid_case_0_date)),
# latest covid event before study start
anycovid_0_date = pmax(postest_0_date, covidemergency_0_date, covidadmitted_0_date, na.rm = TRUE),
time_since_last_covid = covid_vax_1_date - anycovid_0_date
# # earliest covid event after study start
# anycovid_1_date = pmin(postest_1_date, covidemergency_1_date, covidadmitted_1_date, covidcc_1_date, coviddeath_date, na.rm=TRUE),
#
# noncoviddeath_date = if_else(!is.na(death_date) & is.na(coviddeath_date), death_date, as.Date(NA_character_)),
#
# cause_of_death = fct_case_when(
#   !is.na(coviddeath_date) ~ "covid-related",
#   !is.na(death_date) ~ "not covid-related",
#   TRUE ~ NA_character_
# ),
)
# create dummy data for treated and potential control population ----
library("tidyr", lib.loc = "C:/Program Files/R/R-4.1.3/library")
library("tidyverse", lib.loc = "C:/Program Files/R/R-4.1.3/library")
#library("tidyverse")
library("arrow")
library("here")
library("glue")
# remotes::install_github("https://github.com/wjchulme/dd4d")
library("dd4d")
source(here("lib", "functions", "utility.R"))
population_size <- 20000
# get nth largest value from list
nthmax <- function(x, n = 1) {
dplyr::nth(sort(x, decreasing = TRUE), n)
}
source(here("analysis", "design.R"))
cohort <- "over12"
dates <- map(study_dates[[cohort]], as.Date)
params <- study_params[[cohort]]
minage <- params$minage
maxage <- params$maxage
start_date <- as.Date(dates$start_date)
end_date <- as.Date(dates$end_date)
followupend_date <- as.Date(dates$followupend_date)
index_date <- as.Date(dates$start_date)
first_pfizerA_date <- as.Date(dates$start_date)
first_pfizerC_date <- as.Date(dates$start_date)
index_day <- 0L
start_day <- as.integer(start_date - index_date)
end_day <- as.integer(end_date - index_date)
first_pfizerA_day <- as.integer(first_pfizerA_date - index_date)
first_pfizerC_day <- as.integer(first_pfizerC_date - index_date)
known_variables <- c(
"minage", "maxage",
"index_date", "start_date", "end_date", "first_pfizerA_date", "first_pfizerC_date",
"index_day", "start_day", "end_day", "first_pfizerA_day", "first_pfizerC_day"
)
sim_list_pre <- lst(
# dereg_day = bn_node(
#   ~as.integer(runif(n=..n, start_day, start_day+120)),
#   missing_rate = ~0.99
# ),
#
# has_follow_up_previous_6weeks = bn_node(
#   ~rbernoulli(n=..n, p=0.999)
# ),
#
age = bn_node(
~ as.integer(runif(n = ..n, minage, maxage))
),
age_aug21 = bn_node(
~age
),
treated = bn_node(
~ rbernoulli(n = ..n, p = 0.3),
),
registered = bn_node(
~ rbernoulli(n = ..n, p = 1),
),
has_died = bn_node(
~ rbernoulli(n = ..n, p = 0.1),
),
child_atrisk = bn_node(
~ rbernoulli(n = ..n, p = 0.1),
),
ethnicity = bn_node(
~ rfactor(n = ..n, levels = c("1", "2", "3", "4", "5"), p = c(.8, 0.05, 0.05, 0.05, 0.05)),
missing_rate = ~0.001 # this is shorthand for ~(rbernoulli(n=..n, p = 0.2))
),
sex = bn_node(
~ rfactor(n = ..n, levels = c("F", "M"), p = c(0.51, 0.49)),
missing_rate = ~0.001 # this is shorthand for ~(rbernoulli(n=..n, p = 0.2))
),
#
# bmi = bn_node(
#   ~rfactor(n=..n, levels = c("Not obese", "Obese I (30-34.9)", "Obese II (35-39.9)", "Obese III (40+)"), p = c(0.5, 0.2, 0.2, 0.1)),
# ),
#
practice_id = bn_node(
~ as.integer(runif(n = ..n, 1, 200))
),
msoa = bn_node(
~ factor(as.integer(runif(n = ..n, 1, 100)), levels = 1:100),
missing_rate = ~0.005
),
stp = bn_node(
~ factor(as.integer(runif(n = ..n, 1, 36)), levels = 1:36)
),
region = bn_node(
variable_formula = ~ rfactor(n = ..n, levels = c(
"North East",
"North West",
"Yorkshire and The Humber",
"East Midlands",
"West Midlands",
"East",
"London",
"South East",
"South West"
), p = c(0.2, 0.2, 0.3, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05))
),
# imd = bn_node(
#   ~factor(plyr::round_any(runif(n=..n, 1, 32000), 100), levels=seq(0,32000,100)),
#   missing_rate = ~0.02
# ),
#
# imd_integer = bn_node(
#   ~as.integer(as.character(imd)),
#   keep=FALSE
# ),
#
imd_Q5 = bn_node(~ rfactor(
n = ..n,
levels = c("1 (most deprived)", "2", "3", "4", "5 (least deprived)", "Unknown"),
p = c(0.2, 0.2, 0.2, 0.2, 0.19, 0.01)
)),
# rural_urban = bn_node(
#   ~rfactor(n=..n, levels = 1:9, p = rep(1/9, 9)),
#   missing_rate = ~ 0.1
# ),
#
## vaccination variables
first_vax_type = bn_node(~ rcat(n = ..n, c("pfizerA", "pfizerC"), c(0.5, 0.5)), keep = FALSE),
covid_vax_pfizerA_1_day = bn_node(
~ as.integer(runif(n = ..n, first_pfizerA_day, first_pfizerA_day + 90)),
missing_rate = ~ 1 - (first_vax_type == "pfizerA")
),
covid_vax_pfizerA_2_day = bn_node(
~ as.integer(runif(n = ..n, covid_vax_pfizerA_1_day + 180, covid_vax_pfizerA_1_day + 240)),
needs = c("covid_vax_pfizerA_1_day"),
),
covid_vax_pfizerC_1_day = bn_node(
~ as.integer(runif(n = ..n, first_pfizerC_day, first_pfizerC_day + 90)),
missing_rate = ~ 1 - (first_vax_type == "pfizerC")
),
covid_vax_pfizerC_2_day = bn_node(
~ as.integer(runif(n = ..n, covid_vax_pfizerC_1_day + 180, covid_vax_pfizerC_1_day + 240)),
needs = c("covid_vax_pfizerC_1_day"),
),
vax1_day = bn_node(
~ pmin(
if_else(first_vax_type == "pfizerC", covid_vax_pfizerC_1_day, NA_integer_),
if_else(first_vax_type == "pfizerA", covid_vax_pfizerA_1_day, NA_integer_),
na.rm = TRUE
),
keep = FALSE
),
## baseline clinical variables
# asthma = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# chronic_neuro_disease = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# chronic_resp_disease = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# sev_obesity = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# diabetes = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# sev_mental = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# chronic_heart_disease = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# chronic_kidney_disease = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# chronic_liver_disease = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# cancer = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# immunosuppressed = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# asplenia = bn_node( ~rbernoulli(n=..n, p = 0.02)),
# learndis = bn_node( ~rbernoulli(n=..n, p = 0.02)),
#
# cev_ever = bn_node( ~rbernoulli(n=..n, p = 0.05)),
# endoflife = bn_node( ~rbernoulli(n=..n, p = 0.001)),
# housebound = bn_node( ~rbernoulli(n=..n, p = 0.001)),
#
# prior_covid_test_frequency = bn_node(
#   ~as.integer(rpois(n=..n, lambda=3)),
#   missing_rate = ~0
# ),
# inhospital = bn_node( ~rbernoulli(n=..n, p = 0.01)),
## pre-baseline events where event date is relevant
#
primary_care_covid_case_0_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day - 100, vax1_day - 1)),
missing_rate = ~0.7
),
#
# covid_test_0_day = bn_node(
#   ~as.integer(runif(n=..n, vax1_day-100, vax1_day-1)),
#   missing_rate = ~0.7
# ),
#
postest_0_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day - 100, vax1_day - 1)),
missing_rate = ~0.9
),
covidemergency_0_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day - 100, vax1_day - 1)),
missing_rate = ~0.99
),
covidadmitted_0_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day - 100, vax1_day - 1)),
missing_rate = ~0.99
),
#
)
sim_list_post <- lst(
# ## post-baseline events (outcomes)
dereg_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 120)),
missing_rate = ~0.99
),
primary_care_covid_case_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.7
),
covid_test_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.7
),
postest_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.7
),
emergency_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 200)),
missing_rate = ~0.8
),
emergencyhosp_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 200)),
missing_rate = ~0.85
),
covidemergency_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 200)),
missing_rate = ~0.8
),
covidemergencyhosp_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 200)),
missing_rate = ~0.85
),
# respemergency_day = bn_node(
#   ~as.integer(runif(n=..n, vax1_day, vax1_day+100)),
#   missing_rate = ~0.95
# ),
#
# respemergencyhosp_day = bn_node(
#   ~as.integer(runif(n=..n, vax1_day, vax1_day+100)),
#   missing_rate = ~0.95
# ),
covidadmitted_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.7
),
# placeholder for single criticalcare variable ---
covidcritcare_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.8
),
admitted_unplanned_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.7
),
# admitted_planned_day = bn_node(
#   ~as.integer(runif(n=..n, vax1_day, vax1_day+100)),
#   missing_rate = ~0.7
# ),
coviddeath_day = bn_node(
~death_day,
missing_rate = ~0.7,
needs = "death_day"
),
death_day = bn_node(
~ as.integer(runif(n = ..n, vax1_day, vax1_day + 100)),
missing_rate = ~0.90
),
)
sim_list <- splice(sim_list_pre, sim_list_post)
bn <- bn_create(sim_list, known_variables = known_variables)
bn_plot(bn)
bn_plot(bn, connected_only = TRUE)
set.seed(10)
dummydata <- bn_simulate(bn, pop_size = population_size, keep_all = FALSE, .id = "patient_id")
dummydata_processed <- dummydata %>%
mutate(
# covid vax any
covid_vax_any_1_day = pmin(covid_vax_pfizerA_1_day, covid_vax_pfizerC_1_day, na.rm = TRUE),
covid_vax_any_2_day = pmin(covid_vax_pfizerA_2_day, covid_vax_pfizerC_2_day, na.rm = TRUE),
) %>%
# convert logical to integer as study defs output 0/1 not TRUE/FALSE
# mutate(across(where(is.logical), ~ as.integer(.))) %>%
# convert integer days to dates since index date and rename vars
mutate(across(ends_with("_day"), ~ as.Date(as.character(index_date + .)))) %>%
rename_with(~ str_replace(., "_day", "_date"), ends_with("_day"))
fs::dir_create(here("lib", "dummydata"))
dummydata_processed %>%
filter(treated) %>%
select(-treated) %>%
write_feather(sink = ghere("lib", "dummydata", "dummy_treated_{cohort}.feather"))
dummydata_processed %>%
select(-treated) %>%
select(-all_of(str_replace(names(sim_list_post), "_day", "_date"))) %>%
select(-covid_vax_pfizerA_1_date, -covid_vax_pfizerA_2_date, -covid_vax_pfizerC_1_date, -covid_vax_pfizerC_2_date, -covid_vax_any_2_date) %>%
write_feather(sink = ghere("lib", "dummydata", "dummy_control_potential1_{cohort}.feather"))
